File structure:
- ./src: all the source code 
- ./demos: images that shows each feature
- ./REPORT.txt: an explanation of this project
- ./CHECKLIST.txt: for grading purpose only

Basic features:
- Phong illumination 
- Intersection with sphere 
- Intersection with plane 
- Ray casting

Advanced features:
- Recursive ray tracing
    Achieved by adding a 'depth' parameter when shooting rays. Recursively reflects rays in a slightly random direction
    until depth=0.
- Anti-aliasing:
	  Achieved by shooting more rays per pixel and averaging the colors.
- Depth of field 
	  Achieved by shading each pixel with more rays that starts at random places on lens and points to the focal point. 
- Extended light source, soft shadow
    Achieved by approximating point lights as spheres and using a random point on the sphere as the light's position
    during intersections.
- Texure mapping
    Achieved by adding Texture class to Material and converting 3D intersection points to UV space to map to the
    2D texture maps.
- Reflection
    Achieved by shooting another ray in the perfect specular direction given the normal and incoming ray direction.
- Refraction
	  Achieved by applying snell's law.
- Fresnel law
	  Balanced between refraction and reflection color using fresnel law.
- Glossy effect
    Achieved by distorting the direction of the reflected ray to take into account the roughness of the surface.    
- Non-trivial object
    Added support for rendering cylinder objects.

External reference:
- A paper explaining how refraction works in graphics:
  http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf
- Formula for UV mapping
  https://en.wikipedia.org/wiki/UV_mapping
- Various formulas for intersection and ray tracing
  http://www.teach.cs.toronto.edu/~moore/csc418/Notes/BasicRayTracing.pdf
- Glossy reflection information
  http://www.raytracegroundup.com/downloads/Chapter25.pdf

Role of each member:
Ginny is responsible for implementing non-trivial object, hard shadow, anti-aliasing, depth of field, refraction and Fresnel law.
Jordan is responsible for implementing basic ray tracing, recursive ray tracing, soft shadows, texture mapping,
    reflection and glossy effect.
Both two members worked together in setting up scenes and testing features.